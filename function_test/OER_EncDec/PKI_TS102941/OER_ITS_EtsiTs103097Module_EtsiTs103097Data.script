.******************************************************************************
.* Copyright (c) 2000-2018 Ericsson Telecom AB
.* All rights reserved. This program and the accompanying materials
.* are made available under the terms of the Eclipse Public License v2.0
.* which accompanies this distribution, and is available at
.* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
.*
.* Contributors:
.*   Balasko, Jeno
.*   Beres, Szabolcs
.*   Delic, Adam
.*   Kovacs, Ferenc
.*   Szabados, Kristof
.*
.******************************************************************************/
:text.
:lang eng.
.*
:docname.Test Description
:docno.8/152 91-CRL 113 200/5 Uen
:rev.C
:date.2015-04-27
.*
:prep.ETH/XZR Kristof Szabados (+36 1 437 7256)
:appr.ETH/XZ (Roland Gecse)
:checked.ETHBAAT
.*
:title.Test Description - OER coder
:contents level=3.
.*---------------------------------------------------------------------*
:h1.PREREQUISITES AND PREPARATIONS
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Scope of the Test Object
.*---------------------------------------------------------------------*
:xmp tab=1 nokeep.

This TD contains unified test cases related to TTCN3 Executor's OER coder function.

The target of these test cases are the basic data types from specification
'ISO/IEC 8825-7:2015 -- Information technology – ASN.1 encoding rules:
Specification of Octet Encoding Rules'

The target data types are used in the following technical specification:
 'ETSI TS 103 097 V1.3.1 (2017-10)'
Intelligent Transport Systems (ITS); Security;
Security header and certificate formats and certificate formats 

 'IEEE Std 1609.2-2016 IEEE Standard'
Wireless Access in Vehicular Environments—Security Services for
Applications and Management Messages

:exmp.

:p.:us.Revision Information:eus.

:xmp nokeep.
:us.History:eus.

REV   DATE         PREPARED   CHANGE
===   ==========   ========   ======
A     2003-10-31   ETHEKR     New document
B     2007-03-06   EDMDELI    Implicit message encoding
C     2007-03-21   EJNOSZA    Bugfix in a testcase for implicit msg. enc.
D     2008-10-01   EFERKOV    Big integers
E     2010-01-18   EKRISZA    Updated for TITAN R8C
F     2011-06-18   EKRISZA    Added tests for errors
A     2011-12-12   EKRISZA     Updated for release
PB1   2011-01-30   ETHBAAT    Editorial changes

:exmp.


.*---------------------------------------------------------------------*
:h2.Test Tools
.*---------------------------------------------------------------------*
:p.:us.Software Tools:eus.
:xmp tab=2 nokeep.

	SAtester

:exmp.
:np.
.*---------------------------------------------------------------------*
:h1.REQUIREMENT-BASED TESTS
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Testing OER encoding of the basic types
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h3. OER encoding
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - OER encoding (unified tests)>

<STATIC:ASN>

TempA

DEFINITIONS ::=

BEGIN

IMPORTS
  Certificate, Ieee1609Dot2Data FROM IEEE1609dot2 {
    iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609)
    dot2(2) base(1) schema(1) major-version-2(2)
  }

  EtsiTs102941Data, EtsiTs102941DataContent FROM EtsiTs102941MessagesCa {
    itu-t(0) identified-organization(4) etsi(0)
    itsDomain(5) wg5(5) ts(102941) messagesCa(0) version1(1)
  };

  TestCertificate ::= Certificate

END

<STATIC>


type component Test_CT {}

<TTCN_TC:PURE_EXEC>

import from IEEE1609dot2 all;
import from EtsiTs103097Module all;

external function enc_Ieee1609Dot2Data(in Ieee1609Dot2Data pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_Ieee1609Dot2Data(in octetstring stream) return Ieee1609Dot2Data with { extension "prototype(convert) decode(OER)" }

external function enc_EtsiTs103097Data(in EtsiTs103097Data pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_EtsiTs103097Data(in octetstring stream) return EtsiTs103097Data with { extension "prototype(convert) decode(OER)" }

//*********************************************
// TESTCASES
//*********************************************

testcase tc_Ieee1609Dot2Data() runs on Test_CT {
  const octetstring encrypted_data_encoded := '03820101826CC2023B5115003E8083B398874C55EEBECBC09440B7904A3B1AAD786B606E1786F8E06B7926B0D8852E11C07D88519FE1564A81D58561F575C7C01AF55280FE45006175930FEB93B94380AB52F0B193CD6659F421B98B818CA75B0B6EF8D41D47D41F6CE678434D9081A8BF7296396A1EC09EB5DA15C83FEA8F0CCEC6850203B58B51812B5A7A5FA40F9AF0B9ABABBD6A45D2D5EBB86FCCA7A2A2B4074DBCB19B936A507D19E77AA52C5402AF117CE0735DBCE7C4835BCC97E205FC0CB13B8462FC2C3BAB94CDBDA1BC75C4C37E32CE36D48832F078519335C21A5FB2BD77D6038D99A2F3'O;
  const Ieee1609Dot2Data encrypted_data := {
	protocolVersion := 3,
	content := {
		encryptedData := {
			recipients := { {
				certRecipInfo := {
					recipientId := '6CC2023B5115003E'O,
					encKey := {
						eciesNistP256 := {
							v := { compressed_y_1 := 'B398874C55EEBECBC09440B7904A3B1AAD786B606E1786F8E06B7926B0D8852E'O },
							c := '11C07D88519FE1564A81D58561F575C7'O,
							t := 'C01AF55280FE45006175930FEB93B943'O
						}
					}
				}
			} },
			ciphertext := {
				aes128ccm := {
					nonce := 'AB52F0B193CD6659F421B98B'O,
					ccmCiphertext := 'A75B0B6EF8D41D47D41F6CE678434D9081A8BF7296396A1EC09EB5DA15C83FEA8F0CCEC6850203B58B51812B5A7A5FA40F9AF0B9ABABBD6A45D2D5EBB86FCCA7A2A2B4074DBCB19B936A507D19E77AA52C5402AF117CE0735DBCE7C4835BCC97E205FC0CB13B8462FC2C3BAB94CDBDA1BC75C4C37E32CE36D48832F078519335C21A5FB2BD77D6038D99A2F3'O
				}
			}
		}
	}
  };

  const EtsiTs103097Data etsi_encrypted_data := {
	protocolVersion := 3,
	content := {
		encryptedData := {
			recipients := { {
				certRecipInfo := {
					recipientId := '6CC2023B5115003E'O,
					encKey := {
						eciesNistP256 := {
							v := { compressed_y_1 := 'B398874C55EEBECBC09440B7904A3B1AAD786B606E1786F8E06B7926B0D8852E'O },
							c := '11C07D88519FE1564A81D58561F575C7'O,
							t := 'C01AF55280FE45006175930FEB93B943'O
						}
					}
				}
			} },
			ciphertext := {
				aes128ccm := {
					nonce := 'AB52F0B193CD6659F421B98B'O,
					ccmCiphertext := 'A75B0B6EF8D41D47D41F6CE678434D9081A8BF7296396A1EC09EB5DA15C83FEA8F0CCEC6850203B58B51812B5A7A5FA40F9AF0B9ABABBD6A45D2D5EBB86FCCA7A2A2B4074DBCB19B936A507D19E77AA52C5402AF117CE0735DBCE7C4835BCC97E205FC0CB13B8462FC2C3BAB94CDBDA1BC75C4C37E32CE36D48832F078519335C21A5FB2BD77D6038D99A2F3'O
				}
			}
		}
	}
  };


  if (enc_Ieee1609Dot2Data(encrypted_data) == encrypted_data_encoded) {setverdict(pass);} else {setverdict(fail);};
  if (dec_Ieee1609Dot2Data(encrypted_data_encoded) == encrypted_data) {setverdict(pass);} else {setverdict(fail);};

  enc_EtsiTs103097Data(etsi_encrypted_data);
}

//*********************************************
// CONTROL PART
//*********************************************

control {
  execute(tc_Ieee1609Dot2Data());
}

<RESULT>

Overall verdict: pass

<END_TC>

