.******************************************************************************
.* Copyright (c) 2000-2018 Ericsson Telecom AB
.* All rights reserved. This program and the accompanying materials
.* are made available under the terms of the Eclipse Public License v2.0
.* which accompanies this distribution, and is available at
.* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
.*
.* Contributors:
.*   Balasko, Jeno
.*   Beres, Szabolcs
.*   Delic, Adam
.*   Kovacs, Ferenc
.*   Szabados, Kristof
.*
.******************************************************************************/
:text.
:lang eng.
.*
:docname.Test Description
:docno.8/152 91-CRL 113 200/5 Uen
:rev.C
:date.2015-04-27
.*
:prep.ETH/XZR Kristof Szabados (+36 1 437 7256)
:appr.ETH/XZ (Roland Gecse)
:checked.ETHBAAT
.*
:title.Test Description - OER coder
:contents level=3.
.*---------------------------------------------------------------------*
:h1.PREREQUISITES AND PREPARATIONS
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Scope of the Test Object
.*---------------------------------------------------------------------*
:xmp tab=1 nokeep.

This TD contains unified test cases related to TTCN3 Executor's OER coder function.

The target of these test cases are the basic data types from specification
'ISO/IEC 8825-7:2015 -- Information technology – ASN.1 encoding rules:
Specification of Octet Encoding Rules'

The target data types are used in the following technical specification:
 'ETSI TS 103 097 V1.3.1 (2017-10)'
Intelligent Transport Systems (ITS); Security;
Security header and certificate formats and certificate formats 

 'IEEE Std 1609.2-2016 IEEE Standard'
Wireless Access in Vehicular Environments—Security Services for
Applications and Management Messages

:exmp.

:p.:us.Revision Information:eus.

:xmp nokeep.
:us.History:eus.

REV   DATE         PREPARED   CHANGE
===   ==========   ========   ======
A     2003-10-31   ETHEKR     New document
B     2007-03-06   EDMDELI    Implicit message encoding
C     2007-03-21   EJNOSZA    Bugfix in a testcase for implicit msg. enc.
D     2008-10-01   EFERKOV    Big integers
E     2010-01-18   EKRISZA    Updated for TITAN R8C
F     2011-06-18   EKRISZA    Added tests for errors
A     2011-12-12   EKRISZA     Updated for release
PB1   2011-01-30   ETHBAAT    Editorial changes

:exmp.


.*---------------------------------------------------------------------*
:h2.Test Tools
.*---------------------------------------------------------------------*
:p.:us.Software Tools:eus.
:xmp tab=2 nokeep.

	SAtester

:exmp.
:np.
.*---------------------------------------------------------------------*
:h1.REQUIREMENT-BASED TESTS
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Testing OER encoding of the basic types
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h3. OER encoding
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - OER encoding (unified tests)>

<STATIC:ASN>

TempA

DEFINITIONS ::=

BEGIN

IMPORTS
  Certificate, Ieee1609Dot2Data FROM IEEE1609dot2 {
    iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609)
    dot2(2) base(1) schema(1) major-version-2(2)
  };

  ECKeyUncompressed ::= SEQUENCE {
    x     OCTET STRING (SIZE (32)),
    y [2] OCTET STRING (SIZE (32))
  }

END

<STATIC>


type component Test_CT {}

<TTCN_TC:PURE_EXEC>

// import from IEEE1609dot2 all;
import from EtsiTs103097Module all;
import from TempA all;

external function enc_EtsiTs103097Certificate(in EtsiTs103097Certificate pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_EtsiTs103097Certificate(in octetstring stream) return EtsiTs103097Certificate with { extension "prototype(convert) decode(OER)" }

//*********************************************
// TESTCASES
//*********************************************

testcase tc_EtsiTs103097Certificate() runs on Test_CT {

  const octetstring encoded := '80030080404142434445464779810F54657374436572746966696361746500000000000165E7B284000C80000000170000001800015001028001248107066061626364658001248107066061626364650101008100808270717273747576777071727374757677707172737475767770717273747576778080827071727374757677707172737475767770717273747576777071727374757677818270717273747576777071727374757677707172737475767770717273747576777071727374757677707172737475767770717273747576777071727374757677'O;

  const EtsiTs103097Certificate data := {
    version := 3,
    type_ := explicit,
    issuer := { sha256AndDigest := '4041424344454647'O },
    toBeSigned := {
      id := { name := "TestCertificate" },
      cracaId := '000000'O,
      crlSeries := 0,
      validityPeriod := { start_ := 23455666, duration := { hours := 12 } },
      region := { circularRegion := { center := { latitude := 23, longitude := 24 }, radius := 1 } },
      assuranceLevel := '50'O,
      appPermissions := {
        { psid := 36, ssp := { bitmapSsp := '606162636465'O } },
        { psid := 36, ssp := { bitmapSsp := '606162636465'O } }
      },
      certIssuePermissions := { { subjectPermissions := { all_ := NULL } } },
      encryptionKey := {
        supportedSymmAlg := aes128Ccm,
        publicKey := { eciesNistP256 := { compressed_y_0 := '7071727374757677707172737475767770717273747576777071727374757677'O } }
      },
      verifyKeyIndicator := { verificationKey := { ecdsaNistP256 := { compressed_y_0 := '7071727374757677707172737475767770717273747576777071727374757677'O } } }
    },
    signature_ := {
      ecdsaBrainpoolP256r1Signature := {
        rSig := { compressed_y_0 := '7071727374757677707172737475767770717273747576777071727374757677'O },
        sSig := '7071727374757677707172737475767770717273747576777071727374757677'O }
    }
  };

  const EtsiTs103097Certificate decoded := {
    version := 3,
    type_ := explicit,
    issuer := { sha256AndDigest := '4041424344454647'O },
    toBeSigned := {
      id := { name := "TestCertificate" },
      cracaId := '000000'O,
      crlSeries := 0,
      validityPeriod := { start_ := 23455666, duration := { hours := 12 } },
      region := { circularRegion := { center := { latitude := 23, longitude := 24 }, radius := 1 } },
      assuranceLevel := '50'O,
      appPermissions := {
        { psid := 36, ssp := { bitmapSsp := '606162636465'O } },
        { psid := 36, ssp := { bitmapSsp := '606162636465'O } }
      },
      certIssuePermissions := {
        { subjectPermissions := { all_ := NULL }, minChainLength := 1, chainLengthRange := 0, eeType := '10000000'B }
      },
      certRequestPermissions := omit,
      canRequestRollover := omit,
      encryptionKey := {
        supportedSymmAlg := aes128Ccm,
        publicKey := { eciesNistP256 := { compressed_y_0 := '7071727374757677707172737475767770717273747576777071727374757677'O } }
      },
      verifyKeyIndicator := { verificationKey := { ecdsaNistP256 := { compressed_y_0 := '7071727374757677707172737475767770717273747576777071727374757677'O } } } },
      signature_ := {
        ecdsaBrainpoolP256r1Signature := {
          rSig := { compressed_y_0 := '7071727374757677707172737475767770717273747576777071727374757677'O },
          sSig := '7071727374757677707172737475767770717273747576777071727374757677'O }
      } 
  };

  if (enc_EtsiTs103097Certificate(data) == encoded) {setverdict(pass);} else {setverdict(fail);}
  if (dec_EtsiTs103097Certificate(encoded) == decoded) {setverdict(pass);} else {setverdict(fail);}

  const octetstring encoded_bis := '80030080616263646566676879810774657374696E6700000000000002C63A81008C80FFFFF2FB0000115C001200010280012480072122232425262780012480072122232425262701020081008100808031323334353637383132333435363738313233343536373831323334353637388080803132333435363738313233343536373831323334353637383132333435363738808031323334353637383132333435363738313233343536373831323334353637383132333435363738313233343536373831323334353637383132333435363738'O;

  const EtsiTs103097Certificate decoded_bis := {
    version := 3,
    type_ := explicit,
    issuer := { sha256AndDigest := '6162636465666768'O },
    toBeSigned := {
      id := { name := "testing"},
      cracaId := '000000'O,
      crlSeries := 0,
      validityPeriod := { start_ := 181818, duration := { milliseconds := 140 } },
      region := { circularRegion := { center := { latitude := -3333, longitude := 4444}, radius := 18 } },
      assuranceLevel := '00'O,
      appPermissions := {
        { psid := 36, ssp := { opaque := '21222324252627'O } },
        { psid := 36, ssp := { opaque := '21222324252627'O } }
      },
      certIssuePermissions := {
        {subjectPermissions := { all_ := NULL }, minChainLength := 1, chainLengthRange := 0, eeType := '10000000'B},
        {subjectPermissions := { all_ := NULL }, minChainLength := 1, chainLengthRange := 0, eeType := '10000000'B}
      },
      certRequestPermissions := omit,
      canRequestRollover := omit,
      encryptionKey := {
        supportedSymmAlg := aes128Ccm,
        publicKey := { eciesNistP256 := { x_only := '3132333435363738313233343536373831323334353637383132333435363738'O } }
      },
      verifyKeyIndicator := { verificationKey := { ecdsaNistP256 := { x_only := '3132333435363738313233343536373831323334353637383132333435363738'O } } }
    },
    signature_ := {
      ecdsaNistP256Signature := {
        rSig := { x_only := '3132333435363738313233343536373831323334353637383132333435363738'O },
        sSig := '3132333435363738313233343536373831323334353637383132333435363738'O } 
    }
  };

  if (enc_EtsiTs103097Certificate(decoded_bis) == encoded_bis) {setverdict(pass);} else {setverdict(fail);}
  if (dec_EtsiTs103097Certificate(encoded_bis) == decoded_bis) {setverdict(pass);} else {setverdict(fail);}
}


testcase tc_EtsiTs103097CertificateBis() runs on Test_CT {

  const octetstring ea_cert_encoded := '800300807B2041A9757A9973198102454100000000001C558EF586000501018002026F810302010E01020081008100808384FAEB1135CDE9D3613E9CF4F20370C79E2D775303777AFC3AA7847096836D9E808082341114F36EBC9CE4B7C01362C5CF25D4F33477E080E9C82DEB25A91B7BADB549808050B99175A90A6BC2311C71917C35E2156018211B0D7EA516D0BC9188A210AF894BA1B22E833A0C2932B94E4A4C2606D6C72546A385DF327F5E06165D6924DD8A'O;

  const EtsiTs103097Certificate ea_cert := {
    version := 3,
    type_ := explicit,
    issuer := { sha256AndDigest := '7B2041A9757A9973'O },
    toBeSigned := {
      id := { name := "EA" },
      cracaId := '000000'O,
      crlSeries := 0,
      validityPeriod := { start_ := 475369205, duration := { years := 5 } },
      region := omit,
      assuranceLevel := omit,
      appPermissions := { { psid := 623, ssp := { bitmapSsp := '010E'O } } },
      certIssuePermissions := {
        { subjectPermissions := { all_ := NULL }, minChainLength := 1, chainLengthRange := 0, eeType := '10000000'B }, 
        { subjectPermissions := { all_ := NULL }, minChainLength := 1, chainLengthRange := 0, eeType := '10000000'B }
      },
      certRequestPermissions := omit,
      canRequestRollover := omit,
      encryptionKey := {
        supportedSymmAlg := aes128Ccm,
        publicKey := { eciesNistP256 := { compressed_y_1 := '84FAEB1135CDE9D3613E9CF4F20370C79E2D775303777AFC3AA7847096836D9E'O } } 
      },
      verifyKeyIndicator := { verificationKey := { ecdsaNistP256 := { compressed_y_0 := '341114F36EBC9CE4B7C01362C5CF25D4F33477E080E9C82DEB25A91B7BADB549'O } } } 
    },
    signature_ := {
      ecdsaNistP256Signature := {
        rSig := { x_only := '50B99175A90A6BC2311C71917C35E2156018211B0D7EA516D0BC9188A210AF89'O },
        sSig := '4BA1B22E833A0C2932B94E4A4C2606D6C72546A385DF327F5E06165D6924DD8A'O
      } 
    }
  };

  const octetstring test_ea_encoded

  const EtsiTs103097Certificate test_ea := {
    version := 3,
    type_ := explicit,
    issuer := { sha256AndDigest := '4F868464C16039AF'O },
    toBeSigned := {
      id := { name := "testEA" },
      cracaId := '000000'O,
      crlSeries := 0,
      validityPeriod := { start_ := 471481205, duration := { years := 10 } },
      region := { identifiedRegion := { { countryOnly := 33 } } },
      assuranceLevel := '00'O,
      appPermissions := {
        { psid := 34, ssp := { opaque := '45673211'O } },
        { psid := 35, ssp := { bitmapSsp := '267121'O } }
      },
      certIssuePermissions := {
        {
          subjectPermissions := {
            explicit := {
              { psid := 36, sspRange := { opaque := { '5671'O, '5671'O } } },
              { psid := 37, sspRange := { bitmapSspRange := { sspValue := '4561'O, sspBitmask := '6781'O } } },
              { psid := 38, sspRange := { all_ := NULL } }
            }
           },
           minChainLength := 1,
           chainLengthRange := 0,
           eeType := '11000000'B
        },
        {
          subjectPermissions := {
            explicit := {
              { psid := 36, sspRange := { opaque := { '5671'O, '5671'O } } },
              { psid := 37, sspRange := { bitmapSspRange := { sspValue := '4561'O, sspBitmask := '6781'O } } },
              { psid := 38, sspRange := { all_ := NULL } }
            }
          },
          minChainLength := 1,
          chainLengthRange := 0,
          eeType := '11000000'B
        }
      },
      certRequestPermissions := omit,
      canRequestRollover := omit,
      encryptionKey := {
        supportedSymmAlg := aes128Ccm,
        publicKey := { eciesNistP256 := { compressed_y_0 := '1D8FF522438F48E54C54D4745FEE862B6C6CCA0CD801A3D66CD54D73701CC5D5'O } }
      },
      verifyKeyIndicator := { verificationKey := { ecdsaNistP256 := { compressed_y_0 := 'F3360B6E9D758D622B3BD912CFD36062E59A1B3933AE05D5C3CC5442C0ACB583'O } } } 
    },
    signature_ := {
      ecdsaNistP256Signature := {
        rSig := { x_only := '5BAF28CE2CB5B1EE1EEE1C9670B51F5F7377F46170E0CDD23A4BE6A4C795B424'O },
        sSig := 'AB5666EE6D8A15D40DFF835F93F9C8E3A7276602F828B400793B54603BBEB035'O 
      }
    }
  };

  if (dec_EtsiTs103097Certificate(ea_cert_encoded) == ea_cert) {setverdict(pass);} else {setverdict(fail);}
  if (enc_EtsiTs103097Certificate(ea_cert) == ea_cert_encoded) {setverdict(pass);} else {setverdict(fail);}

  if (dec_EtsiTs103097Certificate(test_ea_encoded) == test_ea) {setverdict(pass);} else {setverdict(fail);}
  if (enc_EtsiTs103097Certificate(test_ea) == test_ea_encoded) {setverdict(pass);} else {setverdict(fail);}
}



//*********************************************
// CONTROL PART
//*********************************************

control {
//  execute(tc_EtsiTs103097Certificate());
  execute(tc_EtsiTs103097CertificateBis());
}

<RESULT>

Overall verdict: pass

<END_TC>

