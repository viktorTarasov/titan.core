##############################################################################
# Copyright (c) 2000-2018 Ericsson Telecom AB
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v2.0
# which accompanies this distribution, and is available at
# https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
#
# Contributors:
#   
#   Balasko, Jeno
#   Delic, Adam
#   Hanko, Matyas
#   Kovacs, Ferenc
#   Lovassy, Arpad
#   Ormandi, Matyas
#   Raduly, Csaba
#   Szabados, Kristof
#   Szabo, Janos Zoltan â€“ initial implementation
#   Tarasov, Victor
#
##############################################################################
# uncomment this line to use alternative runtime (TITAN_RUNTIME_2)
# RT2 = yes

# This Makefile was generated by the compiler
# of the TTCN-3 Test Executor version 1.4.pl5
# for Matyas Hanko (ethmhk@duna61) on Mon Oct  6 16:26:18 2003

# The following make commands are available:
# - make, make all       Builds the executable test suite.
# - make compile         Translates TTCN-3 and ASN.1 modules to C++.
# - make clean           Removes all generated files.
# - make dep             Creates/updates dependency list.
# - make archive         Archives all source files.

#
# Set these variables...
#

TOP := ../../../
include   $(TOP)/Makefile.cfg


# The path of your TTCN-3 Test Executor installation:
# Uncomment this line to override the environment variable.
# TTCN3_DIR =

# Your platform: (SOLARIS, LINUX, FREEBSD or WIN32)
ifndef PLATFORM
PLATFORM = SOLARIS
endif

# Your C++ compiler:
#CXX = g++

# Flags for the C++ preprocessor (and makedepend as well):
# CPPFLAGS = -D$(PLATFORM) -I$(TTCN3_DIR)/include -I$(XMLDIR)/include/libxml2
# CPPFLAGS = -fPIC -D$(PLATFORM) -I$(TTCN3_DIR)/include -I$(XMLDIR)/include/libxml2 -I/home/vtarasov/projects/idnomic/innovation/its-pki-lib/gerrithub.titan.core/core
CPPFLAGS = -fPIC -D$(PLATFORM) -I$(TTCN3_DIR)/include -I$(XMLDIR)/include/libxml2
ifdef RT2
CPPFLAGS += -DTITAN_RUNTIME_2
endif
ifeq ($(DEBUG), yes)
CPPFLAGS += -DMEMORY_DEBUG
endif

# Flags for the C++ compiler:
CXXFLAGS = -Wall -O0 -g

# Flags for the linker:
LDFLAGS =

# Flags for the TTCN-3 and ASN.1 compiler:
COMPILER_FLAGS = -L
ifdef RT2
COMPILER_FLAGS += -R
endif

# Execution mode: (either ttcn3 or ttcn3-parallel)
ifndef RT2
TTCN3_LIB = ttcn3
else
TTCN3_LIB = ttcn3-rt2
endif


# The path of your OpenSSL installation:
# If you do not have your own one, leave it unchanged.
OPENSSL_DIR = $(TTCN3_DIR)

# Directory to store the archived source files:
# Note: you can set any directory except ./archive
ARCHIVE_DIR = ./backup

#
# You may change these variables. Add your files if necessary...
#

# The TTCN-3 modules needed for this project:
TTCN3_MODULES = Temp.ttcn

# The ASN.1 modules needed for this project:
ASN1_TTCN_MODULES = IEEE1609dot2BaseTypes.asn IEEE1609dot2.asn EtsiTs103097Module.asn EtsiTs102941BaseTypes.asn   EtsiTs102941TrustLists.asn EtsiTs102941TypesAuthorizationValidation.asn  EtsiTs102941TypesEnrolment.asn EtsiTs102941MessagesCa.asn  EtsiTs102941TypesAuthorization.asn  EtsiTs102941TypesCaManagement.asn

ASN1_MODULES = TempA.asn $(ASN1_TTCN_MODULES)

# C++ source & header files generated by TTCN-3 & ASN.1 compilers:
GENERATED_SOURCES = Temp.cc $(ASN1_MODULES:.asn=.cc)
GENERATED_HEADERS = Temp.hh $(ASN1_MODULES:.asn=.hh)

# Source & header files of Test Ports and your other modules:
USER_SOURCES =
USER_HEADERS =

# All object files needed for the executable test suite:
OBJECTS = $(ASN1_TTCN_MODULES:.asn=.o)
HEADERS = $(ASN1_TTCN_MODULES:.asn=.hh)

# The name of the executable test suite:
TARGET = Temp
TARGET_LIB_NAME = EtsiTs102941
TARGET_LIB = lib$(TARGET_LIB_NAME).a

YAML_CFLAGS := $(shell pkg-config --cflags yaml-cpp)
YAML_LDFLAGS := $(shell pkg-config --libs yaml-cpp)
ifeq ($(YAML_CPP_EMITTER), yes)
  CPPFLAGS += -DYAML_CPP_EMITTER $(YAML_CFLAGS)
  LDFLAGS  += $(YAML_LDFLAGS)
endif

#
# Do not modify these unless you know what you are doing...
#
SOLARIS_LIBS = -lxnet -L$(XMLDIR)/lib -lxml2 -lresolv -lcurses
SOLARIS8_LIBS = -lxnet -L$(XMLDIR)/lib -lxml2 -lresolv -lnsl -lsocket -lcurses
LINUX_LIBS = -L$(XMLDIR)/lib -lxml2 -lpthread -lrt -lncurses
FREEBSD_LIBS = -L$(XMLDIR)/lib -lxml2 -lncurses
WIN32_LIBS = -L$(XMLDIR)/lib -lxml2 -lncurses

PKGCONFIG_DIR = $(TTCN3_DIR)/lib/pkgconfig/
PKGCONFIG_FILE = $(PKGCONFIG_DIR)/$(TARGET_LIB_NAME).pc

#
# Rules for building the executable...
#
all: $(TARGET) ;

$(TARGET_LIB): $(OBJECTS)
	$(AR) -r $@ $(OBJECTS)

$(TARGET): Temp.o TempA.o $(TARGET_LIB)
	$(CXX) $(LDFLAGS) -o $@ $^ $(LDFLAGS) -L$(TTCN3_DIR)/lib -l$(TTCN3_LIB) -L$(OPENSSL_DIR)/lib -lcrypto $($(PLATFORM)_LIBS)

$(PKGCONFIG_FILE): $(TARGET_LIB) 
	mkdir -p $(PKGCONFIG_DIR)
	echo "prefix=$(TTCN3_DIR)" > $@
	echo "exec_prefix=$$""{prefix}/bin" >> $@
	echo "includedir=$$""{prefix}/include/$(TARGET_LIB_NAME)" >> $@
	echo "libdir=$$""{prefix}/lib" >> $@
	echo "" >> $@
	echo "Name: $(PROJECT)" >> $@
	echo "Description: Etsi parse/encode library for ITS-PKI project" >> $@
	echo "Version: 0.0.1" >> $@
	echo "Libs: -L$$""{libdir} -l$(TARGET_LIB_NAME) -lstdc++fs" >> $@
	echo "Cflags: -I$$""{includedir}" >> $@

install: $(TARGET_LIB) $(PKGCONFIG_FILE)
	mkdir -p $(TTCN3_DIR)/lib
	cp $(TARGET_LIB) $(TTCN3_DIR)/lib/
	mkdir -p $(TTCN3_DIR)/include/$(TARGET_LIB_NAME)
	cp $(HEADERS) $(TTCN3_DIR)/include/$(TARGET_LIB_NAME)/ 

.cc.o .c.o:
	$(CXX) -g -c $(CPPFLAGS) $(CXXFLAGS) $<

$(GENERATED_SOURCES) $(GENERATED_HEADERS): compile
	@if [ ! -f $@ ]; then $(RM) compile; $(MAKE) compile; fi

compile: $(TTCN3_MODULES) $(ASN1_MODULES)
	$(TTCN3_DIR)/bin/compiler $(COMPILER_FLAGS) $(TTCN3_MODULES) $(ASN1_MODULES) $(ASN1_STATIC_MODULES) - $?
	touch $@

clean:
	-$(RM) $(TARGET) $(TARGET_LIB) $(TARGET_LIB_SHARED) $(OBJECTS) $(GENERATED_HEADERS) $(GENERATED_SOURCES) Temp.o TempA.o compile *.log *.gcda *.gcno

dep: $(GENERATED_SOURCES)
	makedepend $(CPPFLAGS) $(USER_SOURCES) $(GENERATED_SOURCES)

archive:
	mkdir -p $(ARCHIVE_DIR)
	tar -cvhf - $(TTCN3_MODULES) $(ASN1_MODULES) $(USER_HEADERS) $(USER_SOURCES) Makefile | gzip >$(ARCHIVE_DIR)/$(TARGET)-`date '+%y%m%d-%H%M'`.tgz
