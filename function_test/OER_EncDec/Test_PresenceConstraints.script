.******************************************************************************
.* Copyright (c) 2000-2018 Ericsson Telecom AB
.* All rights reserved. This program and the accompanying materials
.* are made available under the terms of the Eclipse Public License v2.0
.* which accompanies this distribution, and is available at
.* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
.*
.* Contributors:
.*   Balasko, Jeno
.*   Beres, Szabolcs
.*   Delic, Adam
.*   Kovacs, Ferenc
.*   Szabados, Kristof
.*   Tarasov, Victor
.*
.******************************************************************************/
:text.
:lang eng.
.*
:docname.Test Description
:docno.8/152 91-CRL 113 200/5 Uen
:rev.C
:date.2015-04-27
.*
:prep.ETH/XZR Kristof Szabados (+36 1 437 7256)
:appr.ETH/XZ (Roland Gecse)
:checked.ETHBAAT
.*
:title.Test Description - OER coder
:contents level=3.
.*---------------------------------------------------------------------*
:h1.PREREQUISITES AND PREPARATIONS
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Scope of the Test Object
.*---------------------------------------------------------------------*
:xmp tab=1 nokeep.

This TD contains unified test cases related to TTCN3 Executor's OER coder function.

The target of these test cases are the basic data types from specification
'ISO/IEC 8825-7:2015 -- Information technology – ASN.1 encoding rules:
Specification of Octet Encoding Rules'

The target data types are used in the following technical specification:
 'ETSI TS 103 097 V1.3.1 (2017-10)'
Intelligent Transport Systems (ITS); Security;
Security header and certificate formats and certificate formats 

 'IEEE Std 1609.2-2016 IEEE Standard'
Wireless Access in Vehicular Environments—Security Services for
Applications and Management Messages

:exmp.

:p.:us.Revision Information:eus.

:xmp nokeep.
:us.History:eus.

REV   DATE         PREPARED   CHANGE
===   ==========   ========   ======
A     2003-10-31   ETHEKR     New document
B     2007-03-06   EDMDELI    Implicit message encoding
C     2007-03-21   EJNOSZA    Bugfix in a testcase for implicit msg. enc.
D     2008-10-01   EFERKOV    Big integers
E     2010-01-18   EKRISZA    Updated for TITAN R8C
F     2011-06-18   EKRISZA    Added tests for errors
A     2011-12-12   EKRISZA     Updated for release
PB1   2011-01-30   ETHBAAT    Editorial changes

:exmp.


.*---------------------------------------------------------------------*
:h2.Test Tools
.*---------------------------------------------------------------------*
:p.:us.Software Tools:eus.
:xmp tab=2 nokeep.

	SAtester

:exmp.
:np.
.*---------------------------------------------------------------------*
:h1.REQUIREMENT-BASED TESTS
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h2.Testing OER encoding of the basic types
.*---------------------------------------------------------------------*
.*---------------------------------------------------------------------*
:h3. OER encoding
.*---------------------------------------------------------------------*
:xmp tab=0.

<TC - OER encoding (unified tests)>

<STATIC:ASN>

TempA

DEFINITIONS ::=

BEGIN

  IMPORTS;

  SequenceSimple ::= SEQUENCE {
    f1 OCTET STRING (SIZE (2)),
    f2 [2] OCTET STRING (SIZE (2)) OPTIONAL,
    f3 [3] OCTET STRING (SIZE (2)) OPTIONAL
  }

  SequenceWithConstraint ::= SequenceSimple (WITH COMPONENTS {..., f2 ABSENT, f3 PRESENT }) 

END

<STATIC>

type component Test_CT {}

<TTCN_TC:PURE_EXEC>

import from TempA all;

external function enc_OER_SequenceSimple(in SequenceSimple pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_OER_SequenceSimple(in octetstring stream) return SequenceSimple with { extension "prototype(convert) decode(OER)" }
external function enc_OER_SequenceWithConstraint(in SequenceWithConstraint pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_OER_SequenceWithConstraint(in octetstring stream) return SequenceWithConstraint with { extension "prototype(convert) decode(OER)" }

//*********************************************
// TESTCASES
//*********************************************

testcase tc_OER_SequenceSimple() runs on Test_CT {
  const SequenceSimple s := {f1 := 'AAAA'O,f2 := 'BBBB'O,f3 := 'CCCC'O}

  if (enc_OER_SequenceSimple(s) == 'C0AAAABBBBCCCC'O) {setverdict(pass);} else {setverdict(fail);}
  if (dec_OER_SequenceSimple('C0AAAABBBBCCCC'O) == s) {setverdict(pass);} else {setverdict(fail);}
}

testcase tc_OER_SequenceWithConstraint() runs on Test_CT {
  const SequenceWithConstraint seqSO111 := {f1 := 'AAAA'O,f2 := 'BBBB'O,f3 := 'CCCC'O}
  const SequenceWithConstraint seqSO110 := {f1 := 'AAAA'O,f2 := 'BBBB'O,f3 := omit}
  const SequenceWithConstraint seqSO101 := {f1 := 'AAAA'O,f2 := omit,f3 := 'CCCC'O}
  const SequenceWithConstraint seqSO100 := {f1 := 'AAAA'O,f2 := omit,f3 := omit}

  if (enc_OER_SequenceWithConstraint(seqSO111) == 'C0AAAABBBBCCCC'O) {setverdict(pass);} else {setverdict(fail);}
  if (enc_OER_SequenceWithConstraint(seqSO110) == '80AAAABBBB'O) {setverdict(pass);} else {setverdict(fail);}
  if (enc_OER_SequenceWithConstraint(seqSO101) == '40AAAACCCC'O) {setverdict(pass);} else {setverdict(fail);}
  if (enc_OER_SequenceWithConstraint(seqSO100) == '00AAAA'O) {setverdict(pass);} else {setverdict(fail);}

  if (dec_OER_SequenceWithConstraint('C0AAAABBBBCCCC'O) == seqSO111) {setverdict(pass);} else {setverdict(fail);}
  if (dec_OER_SequenceWithConstraint('80AAAABBBB'O)     == seqSO110) {setverdict(pass);} else {setverdict(fail);}
  if (dec_OER_SequenceWithConstraint('40AAAACCCC'O)     == seqSO101) {setverdict(pass);} else {setverdict(fail);}
  if (dec_OER_SequenceWithConstraint('00AAAA'O)         == seqSO100) {setverdict(pass);} else {setverdict(fail);}
}

//*********************************************
// CONTROL PART
//*********************************************

control {
  execute(tc_OER_SequenceSimple());
  execute(tc_OER_SequenceWithConstraint());
}

<RESULT>

Overall verdict: pass

<END_TC>

